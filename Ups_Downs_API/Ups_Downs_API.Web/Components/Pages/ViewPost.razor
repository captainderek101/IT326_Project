@page "/view"
@rendermode InteractiveServer
@inject HttpClient Http
@using Library
@using System.Net.Http.Json
@using System.Text.Json
<h3>View Post</h3>

<button class="btn btn-primary" @onclick="CallReport_POST">Report Post</button>

<form @onsubmit="CallSubscribe_POST">
    <label for="email">Email Address:</label>
    <input type="text" id="email" name="emailaddress"><br><br>
    <input type="submit" value="Submit">
</form>

<button class="btn btn-primary" @onclick="CallVote_PUT">Upvote Post</button>

<form @onsubmit="CallComment_POST">
    <label for="comment">Comment:</label>
    <input type="text" id="comment" name="contents"><br><br>
    <input type="submit" value="Submit">
</form>

<!-- small “text‑box thing” showing what will be sent -->
@if (!string.IsNullOrWhiteSpace(_responseJson))
{
    <div class="mt-3">
        <label class="form-label">API response body</label>
        <textarea class="form-control small" rows="6" readonly>
            @_responseJson
                </textarea>
    </div>
}

@code {
    [Inject]
    private HttpClient _httpClient { get; set; }
    private string _responseJson = ""; //captures the response from the API

    private async Task CallReport_POST()
    {
        //create an object
        var myObject = new Library.ReportRequest(0, 0);

        //add logic to populate the object


        // Send the POST request with the object
        //PostAsJsonAsync will serialize the object to JSON for you
        var response = await _httpClient.PostAsJsonAsync<Library.ReportRequest>("https://localhost:7466/view/report", myObject);
        var rawContent = await response.Content.ReadAsStringAsync();
    }

    private async Task CallVote_PUT()
    {
        //create an object
        var myObject = new Library.VoteRequest(0, 0, true, false);

        //add logic to populate the object


        // Send the POST request with the object
        //PostAsJsonAsync will serialize the object to JSON for you
        var response = await _httpClient.PutAsJsonAsync<Library.VoteRequest>("https://localhost:7466/view/vote", myObject);
        var rawContent = await response.Content.ReadAsStringAsync();
    }

    private async Task CallComment_POST()
    {
        //create an object
        var myObject = new Library.CommentObject(0, 0, "test");

        //add logic to populate the object


        // Send the POST request with the object
        //PostAsJsonAsync will serialize the object to JSON for you
        var response = await _httpClient.PostAsJsonAsync<Library.CommentObject>("https://localhost:7466/view/comment", myObject);
        var rawContent = await response.Content.ReadAsStringAsync();
        // prints if the body is JSON - used to see what API responds with
        try
        {
            var jsonElem = JsonSerializer.Deserialize<JsonElement>(rawContent);
            _responseJson = JsonSerializer.Serialize(
                jsonElem, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            _responseJson = rawContent; // not JSON or bad format – keep raw
        }
    }

    private async Task CallSubscribe_POST()
    {
        //create an object
        var myObject = new Library.SubscriptionRequest(0, 0, "test@test.com", true);

        //add logic to populate the object


        // Send the POST request with the object
        //PostAsJsonAsync will serialize the object to JSON for you
        var response = await _httpClient.PostAsJsonAsync<Library.SubscriptionRequest>("https://localhost:7466/view/subscribe", myObject);
        var rawContent = await response.Content.ReadAsStringAsync();
    }
}
