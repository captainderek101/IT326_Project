@page "/createPost"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@using Google.Cloud.Language.V1
@using Library
@using System.Globalization
@using System.Net.Http.Json
@using System.Text.Json 

@code {
    public Library.User User = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var UserJson = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");

            if (!string.IsNullOrEmpty(UserJson))
            {
                User = System.Text.Json.JsonSerializer.Deserialize<Library.User>(UserJson);
                Console.WriteLine("Found user");
            }
            else
            {
                User = new Library.User(1, "anonymous", "test", null);
                Console.WriteLine("No user found, logged in as anonymous");
            }
            StateHasChanged();
        }
    }
}

<PageTitle>Create a Post</PageTitle>

<h3>Create a Post</h3>

<form @onsubmit="CreatePost">
    <div class="mb-2">
        <label for="daytype">How was your day?</label><br />
        <select id="daytype" @bind="_postDayType">
            <option value="">-- Select --</option>
            <option value="good">Good</option>
            <option value="bad">Bad</option>
        </select>
    </div>

    <div class="mb-2">
        <label for="content">Describe Your Day:</label><br />
        <textarea id="content" rows="5" cols="40" @bind="_content"></textarea>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<br />
<p>@_status</p>

<!-- capture what is being sent to the API -->
<div class="mt-3"> 
    <br />
    <br />
    <label class="form-label">Payload preview</label> 
     <textarea class="form-control small" rows="8" readonly> 
         @_payloadJson 
     </textarea> 
 </div> 

 <!-- Show what the API responds with --> 
 @if (!string.IsNullOrWhiteSpace(_responseJson) && (!string.IsNullOrWhiteSpace(_content) && !string.IsNullOrWhiteSpace(_postDayType)))
 { 
    <div class="mt-3"> 
        <label class="form-label">API response body</label> 
        <textarea class="form-control small" rows="8" readonly> 
            @_responseJson 
        </textarea> 
    </div> 
 } 

@code {
    private string _postDayType = "";
    private string _content = "";

    private string _status = ""; // Shows the response of submission (sucess or possible errors)
    private string _responseJson = ""; // captures the response from the API
    private string _sentimentAnalysis = ""; // new field to hold sentiment results

    // capture what is being sent to the API
    private string _payloadJson =>
        JsonSerializer.Serialize(
            new CreatingPostObject(
                postId: 0,
                postDayType: _postDayType,
                postTimestamp: @DateTime.Now.ToString("HH:mm"),
                userID: 0,
                content: _content,
                sentimentScore: 0),
            new JsonSerializerOptions { WriteIndented = true });


    private async Task CreatePost()
    {
        _sentimentAnalysis = ""; // clear previous sentiment
        var score = await PerformSentimentAnalysis("");

        var post = new CreatingPostObject(
            postId: 0,
            postDayType: _postDayType,
            postTimestamp: @DateTime.Now.ToString("HH:mm"),
            userID: User.UserID,
            content: _content,
            sentimentScore: score);

        var resp = await Http.PostAsJsonAsync("https://localhost:7466/creatingPost/Creation", post);

        // read the response body as text
        var raw = await resp.Content.ReadAsStringAsync();
        
        // respond with the success or potential errors
        if (resp.IsSuccessStatusCode)
        {
            _status = "Post submitted!";
        }

        if (_content == "")
        {
            _status = "Please describe your day!";
        }

        if (_postDayType == "")
        {
            _status = "Please select a type of day!";
        }

        // prints if the body is JSON - used to see what API responds with
        try
        {
            var jsonElem = JsonSerializer.Deserialize<JsonElement>(raw);
            _responseJson = JsonSerializer.Serialize(
                jsonElem, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            _responseJson = raw; // not JSON or bad format – keep raw
        }
    }

    // take in the user's entered content, send it to google's natural cloud API for analysis, return with the score
    private async Task<double> PerformSentimentAnalysis(string apiKey)
    {
        var client = new LanguageServiceClientBuilder { ApiKey = apiKey }.Build();
        var document = Document.FromPlainText(_content);
        var response = await client.AnalyzeSentimentAsync(document);

        Console.WriteLine($"Attempting Sentiment Analysis");
        Console.WriteLine($"Sentiment score: {response.DocumentSentiment.Score}");

        _sentimentAnalysis = $@"Sentiment score:  {response.DocumentSentiment.Score}";

        return response.DocumentSentiment.Score;
    }
}
